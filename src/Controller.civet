export interface ControllerPreferences
  axisThreshold: number
  buttonMapping: Partial<Record<number, string>>
  axisMapping: Partial<Record<number, [string, string]>>

export default class Controller
  @#registry = new FinalizationRegistry (controller: Controller) =>
    window.removeEventListener 'gamepadconnected', controller#connectListener
    window.removeEventListener 'gamepaddisconnected', controller#disconnectListener

  #gamepad: Gamepad?
  #index: number

  #connectListener = (e: GamepadEvent) =>
    if e.gamepad.index is #index
      #gamepad = e.gamepad
  #disconnectListener = (e: GamepadEvent) =>
    if e.gamepad is #gamepad
      #gamepad = undefined

  get #index
  set index(newValue: number)
    newValue >>>= 0
    return if newValue is #index
    #index = newValue
    #gamepad = undefined
    #autodetectGamepad()

  get #gamepad?.id

  // Calculated s.t. each position takes up 1/8th of the outermost circle
  axisThreshold = comptime Math.sqrt(2) / (4 * Math.sin(0.375 * Math.PI))

  buttonMapping: Partial<Record<number, string>> = [
    'Y'
    'B'
    'A'
    'X'
    'L'
    'R'
    'ZL'
    'ZR'
    'M'
    'P'
    'LSi'
    'RSi'
  ]
  /** Mapping of axis number => [if negative, if positive] */
  axisMapping: Partial<Record<number, [string, string]>> = {
    0: ['LSl', 'LSr']
    1: ['LSu', 'LSd']
    2: ['RSl', 'RSr']
    5: ['RSu', 'RSd']
  }

  @(index: number)
    #index = index

    window.addEventListener 'gamepadconnected', #connectListener
    window.addEventListener 'gamepaddisconnected', #disconnectListener

    setTimeout => #autodetectGamepad()
    Controller.#registry.register @, @

  #autodetectGamepad(): void
    return if #gamepad?
    gamepads := navigator.getGamepads()
    if gamepads# > #index
      #gamepad = gamepads[#index] ?? undefined

  get preferencesJSON(): ControllerPreferences
    {
      @axisThreshold
      buttonMapping: {...@buttonMapping}
      axisMapping: structuredClone @axisMapping
    }
  set preferencesJSON(newValue: ControllerPreferences)
    { @axisThreshold, @buttonMapping, @axisMapping } = newValue
  
  get inputs(): Set<string>?
    return undefined unless #gamepad?
    buttons := #gamepad.buttons.flatMap (el, i) =>
      if el.pressed and i in @buttonMapping then [@buttonMapping[i]!] else []
    axes := #gamepad.axes.flatMap<string> (el, i) =>
      if i !in @axisMapping
        []
      else if el >= @axisThreshold
        [@axisMapping[i]!.1]
      else if el <= -@axisThreshold
        [@axisMapping[i]!.0]
      else
        []
    new Set axes ++ buttons

