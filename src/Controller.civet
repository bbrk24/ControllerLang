export interface ControllerPreferences
  axisThreshold: number
  buttonMapping: Partial<Record<number, string>>
  // Two values is a traditional axis, more is something cursed like my D-pad
  axisMapping: Partial<Record<number, string[]>>

// Calculated s.t. each position takes up 1/8th of the outermost circle
defaultAxisThreshold := comptime Math.sqrt(2) / (4 * Math.sin(0.375 * Math.PI))

export class Controller
  #gamepad: Gamepad?
  #index: number

  #connectListener = (e: GamepadEvent) =>
    if e.gamepad.index is #index
      #gamepad = e.gamepad
  #disconnectListener = (e: GamepadEvent) =>
    if e.gamepad is #gamepad
      #gamepad = undefined

  get #index
  set index(newValue: number)
    newValue >>>= 0
    return if newValue is #index
    #index = newValue
    #gamepad = undefined
    #autodetectGamepad()

  get #gamepad?.id

  axisThreshold = defaultAxisThreshold
  buttonMapping: Partial<Record<number, string>> = {}
  axisMapping: Partial<Record<number, string[]>> = {}

  @(index: number, preferences: ControllerPreferences)
    #index = index
    @preferencesJSON = preferences
    window.addEventListener 'gamepadconnected', #connectListener
    window.addEventListener 'gamepaddisconnected', #disconnectListener
    setTimeout => #autodetectGamepad()

  #autodetectGamepad(): void
    return if #gamepad?
    gamepads := navigator.getGamepads()
    if gamepads# > #index
      #gamepad = gamepads[#index] ?? undefined

  get preferencesJSON(): ControllerPreferences
    { @axisThreshold, @buttonMapping, @axisMapping }
  set preferencesJSON(newValue: ControllerPreferences)
    { @axisThreshold, @buttonMapping, @axisMapping } = newValue
  
  get inputs(): Set<string>?
    return undefined unless #gamepad?
    buttons := #gamepad.buttons.flatMap (el, i) =>
      if el.pressed and i in @buttonMapping then [@buttonMapping[i]!] else []
    axes := #gamepad.axes.flatMap<string> (el, i) =>
      if i !in @axisMapping
        []
      else if @axisMapping[i]!# is 2
        if el >= @axisThreshold
          [@axisMapping[i]!.1]
        else if el <= -@axisThreshold
          [@axisMapping[i]!.0]
        else
          []
      else if -1 <= el <= 1
        @axisMapping[i]![Math.round (el + 1) * (@axisMapping[i]!# - 1) / 2]
      else
        []
    new Set axes ++ buttons

export presets: ControllerPreferences[] := [
  // Based on my brother's MarioKart controller and Conor's Xbox controller
  // Both use the same mappings
  {
    buttonMapping: [
      'A'
      'B'
      'X'
      'Y'
      'L'
      'R'
      'ZL'
      'ZR'
      'M'
      'P'
      'LSi'
      'RSi'
      'Du'
      'Dd'
      'Dl'
      'Dr'
      'home'
    ]
    axisMapping: [
      ['LSl', 'LSr']
      ['LSu', 'LSd']
      ['RSl', 'RSr']
      ['RSu', 'RSd']
    ]
    axisThreshold: defaultAxisThreshold
  }
  // Based on my wired Nintendo Switch controller
  {
    buttonMapping: [
      'Y'
      'B'
      'A'
      'X'
      'L'
      'R'
      'ZL'
      'ZR'
      'M'
      'P'
      'LSi'
      'RSi'
      'home'
    ]
    axisMapping: {
      0: ['LSl', 'LSr']
      1: ['LSu', 'LSd']
      2: ['RSl', 'RSr']
      5: ['RSu', 'RSd']
      9: ['Du', 'Dr', 'Dd', 'Dl']
    }
    axisThreshold: defaultAxisThreshold
  }
]
