Grammar
  _* Clause (_+ Clause)* _* ->
    return [$2, ...$3.map(el => el[1])];

Words
  _* Word (_+ Word)* _* ->
    return [$2, ...$3.map(el => el[1])];

Clause
  Adverb _+ Clause ->
    const adverbs = [$1, ...($3.adverbs ?? [])];
    return { ...$3, adverbs };
  Intransitive _+ FullNP ->
    return { verb: $1, subject: $3 };
  Transitive _+ FullNP _+ FullNP ->
    return { verb: $1, subject: $3, object: $5 };

# NP without conjunctions
NP
  Adverb _+ NP ->
    const adverbs = [$1, ...($3.adverbs ?? [])];
    return { ...$3, adverbs };
  Clause
  Determiner ->
    return { determiner: $1 };
  Pronoun ->
    return { pronoun: $1 };

# Actual NP
FullNP
  NP _+ Relativizer _+ Clause ->
    return { relativizer: $3, noun: $1, clause: $5 };
  NP 

# MARK: Parts of Speech
# Adverbs are a small and relatively uncommon class of words, so they must all start with the minus button
Adverb
  Word ->
    if ($1.type === 'single') {
      if ($1.input.lt !== 'M')
        return $skip;
    } else if ($1.input[0].lt !== 'M')
      return $skip;
    return $1;

Determiner
  Word ->
    if ($1.type !== 'single') return $skip;
    if ($1.lt || $1.rt) return $skip;
    return $1;

Pronoun
  Word # TODO: are any restrictions necessary here?

Relativizer
  Word ->
    if ($1.type !== 'single' || $1.input.lt !== 'LSi') return $skip;
    return $1;

Intransitive
  Word ->
    if ($1.type === 'single') {
      if ($1.input.lt !== 'LSl') return $skip;
    } else if ($1.input[1].lt !== 'LSl') return $skip;
    return $1;

Transitive
  Word ->
    if ($1.type === 'single') {
      if ($1.input.lt !== 'LSr') return $skip;
    } else if ($1.input[1].lt !== 'LSr') return $skip;
    return $1;


_
  /\s+/

# MARK: Word
# A word can be a single input, or an input chord (delimited by square brackets).
# An input has up to three properties:
#  - `lt`: A single string describing the left thumb's action. "M" = minus
#  - `s`: An array of up to four strings describing the shoulder/trigger buttons
#  - `rt`: An array of up to two strings describing the right thumb's action. "P" = plus
# The left thumb cannot perform two actions at once, and the right thumb may only perform
# two actions if they are adjacent face buttons (e.g. A+B).
Word
  # single input
  Input ->
    return { type: 'single', input: $1 };
  # input chord with validation
  "[" Input (_ Input)+ "]" ->
    function overlaps(in1, in2) {
      if ((in1.rt && in2.rt) || (in1.lt && in2.lt)) return true;
      if (!(in1.s && in2.s)) return false;
      return in1.s.some(in2.s.includes, in2.s);
    }
    const presses = $3.map(el => el[1]);
    if (presses.some(el => overlaps($2, el))) return $skip;
    return { type: 'chord', input: [$2, ...presses] };

Direction
  "u"
  "d"
  "l"
  "r"

StickDirection
  "ul"
  "ur"
  "dl"
  "dr"
  Direction
  "t" # twirl
  "i" # "in", i.e. click

LeftThumb
  "LS" StickDirection ->
    return $1 + $2;
  "D" Direction ->
    return $1 + $2;
  "M"

Shoulder
  "L"
  "R"
  "ZL"
  "ZR"

Plus
  "+"

RightThumb
  "RS" StickDirection ->
    return [$1 + $2];
  "A" Plus "B" -> ["A", "B"]
  "A" Plus "X" -> ["A", "X"]
  "B" Plus "Y" -> ["B", "Y"]
  # X+Y intentionally omitted for now
  "A" -> ["A"]
  "B" -> ["B"]
  "X" -> ["X"]
  "Y" -> ["Y"]
  "P" -> ["P"]

Shoulders
  Shoulder (Plus Shoulder)* ->
    const arr = [$1, ...$2.map(el => el[1])];
    const set = new Set(arr);
    if (set.size !== arr.length) return $skip;
    // Check if it's in the correct order
    if (!arr.every((o, i) => i === 0 || arr[i - 1] < arr[i])) return $skip;
    return arr;

Input
  LeftThumb (Plus RightThumb)? (Plus Shoulders)? ->
    let text = $1;
    if ($2) text += $2[0] + $2[1].join('+');
    if ($3) text += $3[0] + $3[1].join('+');
    return { text, lt: $1, rt: $2?.[1], s: $3?.[1] };
  RightThumb (Plus Shoulders)? ->
    let text = $1.join('+');
    if ($2) text += $2[0] + $2[1].join('+');
    return { text, rt: $1, s: $2?.[1] };
  Shoulders -> 
    return { s: $1, text: $1.join('+') };